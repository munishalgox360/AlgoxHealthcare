const mongoose = require("mongoose");

const assessmentSchema = new mongoose.Schema({
  category: String,
  description: mongoose.Mixed,
  id: String,
  head: String,
  image: String,
  name: String,
  price: Number,
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
  quantity: Number,
});
const couponSchema = new mongoose.Schema({
  code: String,
  singleUser: mongoose.Mixed,
  status: String,
  usedBy: mongoose.Mixed,
  uses: Number,
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
  value: Number,
});
const transactionSchema = new mongoose.Schema({
  amtPaid: String,
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
  appointmentDate: String,
  bookingId: String,
  doctorData: mongoose.Mixed,
  doctorId: String,
  groupId: String,
  orderId: String,
  patientUid: String,
  patients: mongoose.Mixed,
  paymentId: String,
  slot: String,
  start: String,
  status: String,
  timestamp: mongoose.Mixed,
  title: String,
  todayDate: String,
  type: String,

  doctorEmail: String,
  doctorDisplayName: String,
  patientsEmail: String,
  patientsPhoneNumber: String,
  patientsName: String,
  slot_initials: String,
});
const mediaSchema = new mongoose.Schema({
  createdAt: String,
  expired: mongoose.Mixed,
  featured_media: String,
  id: String,
  name: String,
  type: String,
});

const userSchema = new mongoose.Schema({
 
  defaultPrice:Number,
  uid: String,
  type: String,
  symptoms: [mongoose.Mixed],
  treatments: [mongoose.Mixed],
  role: String,
  userId: String,
  meetLink: String,
  countryCode: String,
  balance: { type: Number, default: 500 },
  phoneNumber: String,
  email: mongoose.Mixed,
  firstName: String,
  likes: [mongoose.Mixed],
  notifications: [mongoose.Mixed],
  addresses: [mongoose.Mixed],
  bookmarks: [mongoose.Mixed],
  credits: Number,
  instagram: String,
  facebook: String,
  twitter: String,
  github: String,
  linked_in: String,
  address_1: String,
  address_2: String,
  geotag: String,
  isAdmin: mongoose.Mixed,
  category: { type: [mongoose.Mixed], default: undefined },
  dateOfBirth: String,
  displayName: String,
  appointments: { type: [mongoose.Mixed], default: [] },
  education: { type: [mongoose.Mixed], default: [] },
  permissions: { type: [mongoose.Mixed], default: [] },
  registration: { type: [mongoose.Mixed] },
  attachments: { type: [mongoose.Mixed] },
  services: { type: [mongoose.Mixed] },
  experience: { type: [mongoose.Mixed] },
  award: { type: [mongoose.Mixed] },
  membership: { type: [mongoose.Mixed] },
  transactions: { type: [mongoose.Mixed], default: [] },
  gender: mongoose.Mixed,
  lastName: mongoose.Mixed,
  phone: String,
  organization: mongoose.Mixed,
  venture: mongoose.Mixed,
  bills: [mongoose.Mixed],
  prescriptions: [mongoose.Mixed],
  password: String,
  age: mongoose.Mixed,
  biography: String,
  clinic: mongoose.Mixed,
  clinicTimings: mongoose.Mixed,
  about: String,
  consultation: mongoose.Mixed,
  prefix: String,
  psychotherapy: mongoose.Mixed,
  price: Number,
  psychotherapyPrice: String,
  rank: Number,
  psyID: { type: Number, unique: true },
  roles: { type: [mongoose.Mixed], default: undefined },
  status: String,
  source: String,
  city: String,
  qr: String,
  isVenture: { type: Boolean, default: false },
  created: { type: Boolean, default: true },
  group: { type: String, default: undefined },
  yearsOfExperience: Number,
  orgName: String,
  country: String,
  title: String,
  photoURL: String,
  pincode: String,
  qualifications: String,
  designation: String,
  courses: mongoose.Mixed,
  instructor: mongoose.Mixed,
  slots: { type: [mongoose.Mixed], default: undefined },
  specialization: { type: [mongoose.Mixed], default: undefined },
  state: String,
  workExperience: { type: [mongoose.Mixed], default: [] },
  desiredJobTitle: { type: [mongoose.Mixed], default: [] },
  skills: { type: [mongoose.Mixed], default: [] },
  languages: { type: [mongoose.Mixed], default: [] },
  coverLetter: { type: [mongoose.Mixed], default: [] },
  expertise: { type: [mongoose.Mixed], default: [] },
  currentSalary: { type: String, default: "" },
  expectedSalary: { type: String, default: "" },
  deleted: { type: Boolean, default: false },
  deactivated: { type: Boolean, default: false },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
  rank:Number,
});

const disorderSchema = new mongoose.Schema({
  head: String,
  imageURL: String,
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
  items: [
    {
      title: String,
      description: String,
      imageURL: String,
      items: [mongoose.Mixed],
    },
  ],
});
const User = mongoose.model("User", userSchema);
const Coupon = mongoose.model("Coupon", couponSchema);
const Media = mongoose.model("Media", mediaSchema);
const Assessment = mongoose.model("Assessment", assessmentSchema);
const Transaction = mongoose.model("Transactions", transactionSchema);
const Disorder = mongoose.model("Disorder", disorderSchema);

module.exports = { User, Coupon, Media, Assessment, Transaction, Disorder };
